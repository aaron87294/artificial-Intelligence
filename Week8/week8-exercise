"""
Solving Linear Equations and Visualizing a Linear Transformation
"""

import numpy as np
import matplotlib.pyplot as plt

# Part 1: Solving a System of Linear Equations Ax = b
A = np.array([
    [27, -10, 4, -29],
    [-16, 5, -2, 18],
    [-17, 4, -2, 20],
    [-7, 2, -1, 8]
])
b = np.array([1, -1, 0, 1])

# Solve Ax = b
x = np.linalg.solve(A, b)
print("Solution to Ax = b:")
print(x)

# Part 2: Visualizing a Linear Transformation T(v) = Av
sqrt2 = np.sqrt(2)
A2 = np.array([
    [1 / sqrt2, -1 / sqrt2],
    [1 / sqrt2, 1 / sqrt2]
])

# Vector x = [2, -2]
x_vec = np.array([2, -2])
T_x = A2 @ x_vec

# Vectors for visualization
origin = np.zeros((2,))
v1 = np.array([1, 0])
v2 = np.array([0, 1])
T_v1 = A2 @ v1
T_v2 = A2 @ v2

# Plotting the transformation
plt.figure(figsize=(6, 6))
plt.quiver(*origin, *v1, color='gray', angles='xy', scale_units='xy', scale=1, label='e1')
plt.quiver(*origin, *v2, color='gray', angles='xy', scale_units='xy', scale=1, label='e2')
plt.quiver(*origin, *T_v1, color='blue', angles='xy', scale_units='xy', scale=1, label='T(e1)')
plt.quiver(*origin, *T_v2, color='green', angles='xy', scale_units='xy', scale=1, label='T(e2)')
plt.quiver(*origin, *x_vec, color='red', angles='xy', scale_units='xy', scale=1, label='x')
plt.quiver(*origin, *T_x, color='orange', angles='xy', scale_units='xy', scale=1, label='T(x)')

plt.xlim(-3, 3)
plt.ylim(-3, 3)
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.grid(True)
plt.gca().set_aspect('equal', adjustable='box')
plt.legend()
plt.title("Linear Transformation T(v) = Av")
plt.show()


