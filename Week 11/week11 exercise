import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from scipy.stats import binom
import pandas as pd

plt.savefig('histogram.png')  # Save the figure instead of showing
print("Plot saved as histogram.png")

# --- Part 1: Binomial Distribution with Ensemble Model ---

def ensemble_accuracy(n_models, model_accuracy):
    threshold = n_models // 2 + 1
    return sum(binom.pmf(k, n_models, model_accuracy) for k in range(threshold, n_models + 1))

def min_model_accuracy(n_models, target_accuracy=0.95):
    threshold = n_models // 2 + 1
    for acc_percent in range(100):
        acc = acc_percent / 100
        if sum(binom.pmf(k, n_models, acc) for k in range(threshold, n_models + 1)) >= target_accuracy:
            return acc_percent
    return None

def min_models_for_target_accuracy(individual_accuracy, target_accuracy=0.95, max_models=101):
    for m in range(1, max_models, 2):  # Only odd numbers
        threshold = m // 2 + 1
        if sum(binom.pmf(k, m, individual_accuracy) for k in range(threshold, m + 1)) >= target_accuracy:
            return m
    return None

# --- Part 2: Working with Random Data ---

pmf_values = [0.1, 0.2, 0.3, 0.2, 0.2]
values = [1, 2, 3, 4, 5]

def generate_random_values(n=50):
    samples = np.random.choice(values, size=n, p=pmf_values)
    return np.mean(samples)

def simulate_means(num_simulations=1000):
    return [generate_random_values() for _ in range(num_simulations)]

def analyze_means(means):
    plt.hist(means, bins=20, edgecolor='black')

