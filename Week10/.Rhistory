}
}
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
}
else{
return ('I don't know yet.)
}
}
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
}
else{
return ('I don't know yet.)
}
}
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
} else{
return ('I don't know yet.)
}
}
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
} else{
return ('I don't know yet.')
}
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
}
}
calc_ensemble_error(11,0.2)
calc_ensemble_error(11,0.49)
calc_ensemble_error(21,0.49)
ans3
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
}
else{
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
}
}
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
}
else{
return('butts')
}
}
calc_ensemble_error(11,0.2)
calc_ensemble_error(12,0.2)
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
}
else{
return(pbinom(num_models/2-1), num_models, 1-error_rate)
}
}
calc_ensemble_error(12,0.2)
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
}
else{
return(pbinom(num_models/2-1, num_models, 1-error_rate))
}
}
calc_ensemble_error(12,0.2)
calc_ensemble_error = function(num_models, error_rate){
if (num_models %% 2 == 1){
return(pbinom((num_models - 1)/2,num_models, 1-error_rate))
}
else{
return(pbinom(num_models/2-1, num_models, 1-error_rate) +
dbinom(num_models/2, num_models, 1-error_rate)/2)
}
}
calc_ensemble_error(12,0.2)
calc_ensemble_error(12,0.2)
pbinom(5,12,0.8)
pbinom(5,12,0.8)+dbinom(6,12,0.8)/2
library(png)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(pastecs)               # So I can use stat.desc()
install.packages(c("pastecs", "Rcmdr"))
dbinom(9,100,0.09)
#find the prob of 9 or fewer heads
pbinom(9,100,0.09)
#Part 2: Exponential Distribution
#exp pdf f(x) = 2e^(-lambda * x)
#models waiting time in hours
#find probability of waiting less than 20 minutes (1/3 hours)
pexp(1/3, 2)
pexp(log(2)/2, 2)
log(2)/2
x = seq(0.01,5, 0.01)
f = function(x){
return (2* exp(-2*x))
}
f(0)
f(1)
plot(x,f(x))
pbinon(9,100,0.09)
pbinom(9,100,0.09)
pbinom(9,100,0.005)
dbinom(9,100,0.09)
factorial(100)/(factorial(9)*factorial(91))
factorial(100)/(factorial(9)*factorial(91))* 0.09**9*0.91**91
pbinom(9,100,0.09)
pbinom(20,100,0.09)
pbinom(15,100,0.09)-pbinom(5,100,0.09)
pbinom(6,1000,0.005)-pbinom(3,1000,0.005)
sqrt(1000*0.005*(1-0.005))
4
pbinom(15,100,0.09)-pbinom(4,100,0.09)
pbinom(6,1000,0.005)-pbinom(2,1000,0.005)
#models waiting time in hours
#find probability of waiting less than 20 minutes (1/3 hours)
pexp(1/3, 2)
log(2)/2
pexp(1/2,2) - pexp(1/3, 2)
install.packages("here")
pnorm(8,mean = 8, sd = 2)
pnorm(8, mean = 10, sd = 2)
pnorm(14,8,2)-pnorm(10,8,2)
pnorm(14,8,2)
pnorm(14,10,2)-pnorm(10,10,2)
pnorm(1)
pnorm(-1)
pnorm(14,12.1,2.7)-pnorm(10,12.1,2.7)
1-0.5408413
2*12.1+3*12.05
sqrt(2.7^2+4.1^2)
4^2
4*2.7^2+9*4.1^2
X = c(3.01,3.35,4.79,5.96,7.89)
X
mean(X)
sd(X)
seq(1,10,1)
get_percentiles = function(n){
seq(0.5/n,(n-0.5)/n, 1/n)
}
get_percentiles(5)
get_percentiles(10)
qnorm(0.75)
qnorm(0.84)
length(X)
n = length(X)
get_percentiles = function(n){
seq(0.5/n,(n-0.5)/n, 1/n)
}
percentiles = get_percentiles(n)
percentiles
qnorm(percentiles)
qnorm(percentiles, mean = mu, sd = sigma)
mu = mean(X)
sigma = sd(X)
qnorm(percentiles, mean = mu, sd = sigma)
Q = qnorm(percentiles, mean = mu, sd = sigma)
plot(X,Q)
plot(X,Q, pch = 19)
plot(X,Q, pch = 19, cex = 1)
plot(X,Q, pch = 20)
plot(X,Q, pch = 20)
abline(lm(Q ~ X))
abline(lm(Q ~ X))
qqplot = function(X){
n = length(X)
percentiles = get_percentiles(n)
mu = mean(X)
sigma = sd(X)
Q = qnorm(percentiles, mean = mu, sd = sigma)
plot(X,Q, pch = 20)
abline(lm(Q ~ X))
}
qqplot(X)
qqplot(X)
rexp(10)
ex = rexp(10)
qqplot(ex)
mean(ex)
sd(ex)
rexp(10, 5)
rexp(10, 1/5)
qqplot(ex)
qqplot(X)
ex = rexp(1000)
qqplot(ex)
rnorm(1000)
norm = rnorm(1000)
qqplot(norm)
get_percentiles()
percentiles
X = norm
get_percentiles(X)
get_percentiles(X)
length(X)
get_percentiles(X)
get_percentiles(1000)
X
sort(X)
X
qqplot = function(X){
x = sort(X)
n = length(X)
percentiles = get_percentiles(n)
mu = mean(X)
sigma = sd(X)
Q = qnorm(percentiles, mean = mu, sd = sigma)
plot(X,Q, pch = 20)
abline(lm(Q ~ X))
}
X
qqplot(norm)
qqplot(norm)
qqplot(X)
X = rnorm(100)
qqplot(X)
qqplot(sort(X))
qqplot = function(X){
X = sort(X)
n = length(X)
percentiles = get_percentiles(n)
mu = mean(X)
sigma = sd(X)
Q = qnorm(percentiles, mean = mu, sd = sigma)
plot(X,Q, pch = 20)
abline(lm(Q ~ X))
}
X = norm(100)
X = rnorm(100)
qqplot(X)
X = rexp(100)
qqplot(X)
#this function gets a list of the percentiles
get_percentiles = function(n){
seq(0.5/n,(n-0.5)/n, 1/n)
}
#this function plots the normal percentiles
#versus the actual percentiles
qqplot = function(X){
X = sort(X)
n = length(X)
percentiles = get_percentiles(n)
mu = mean(X)
sigma = sd(X)
Q = qnorm(percentiles, mean = mu, sd = sigma)
plot(X,Q, pch = 20)
abline(lm(Q ~ X))
}
X = c(3.01, 3.35, 4.79, 5.96, 7.89)
get_percentiles(length(X))
percents = get_percentiles(5)
percents
qnorm(0.1,mean = mean(X), sd = sd(X))
X = rnorm(100)
qqplot(X)
X = rexp(100)
qqplot(X)
X = rnorm(1000)
qqplot(X)
qqplot(rexp(1000))
x = c(0.783,	1.172,	1.185,	1.625,	1.847,	2.013,	2.423,
3.312,	3.833,	4.973,	6.897,	7.178,	10.838,	13.032)
x
as.numeric(quantile(x,0.25)) - 1.5*IQR(x)
IQR(x)
as.numeric(quantile(x,0.75)) + 1.5*IQR(x)
dbinom(1,80,0.03)
for x in 1:3{}
dbinom(1:3,80,0.03)
sum(dbinom(1:3,80,0.03))
0.97*80
sqrt(80*0.97*0.03)
77.6 - 3*1.525778
pnorm(1.2,mean=2+3.5,sd = sqrt(4+0.5))
pnorm(1.2,mean=3.5-2,sd = sqrt(4+0.5))
1-0.4437685
28^2-22^2
300/250
(30^3-20^3)/750
500*0.65
+400
sqrt(725)
t_data = c(3.32, 2.53, 3.45, 2.38, 3.01)
boxplot(t_data)
hist(t_data)
boxplot(t_data)
t_data
mean(t_data)
sd(t_data)
mean = mean(t_data)
s = sd(t_data)
mean - 2.78*s/sqrt(5)
mean + 2.78*s/sqrt(5)
t.test(t_data)
t = 2.776445
mean - t*s/sqrt(5)
t_data
boxplot(t_data)
t.test(t_data, conf.level = 0.95)
mean(t_data)
sd(t_data)
sample?
help sample
sample help
help("sample")
l = [TRUE, FALSE, TRUE]
l = c(TRUE, FALSE, TRUE)
l
sum(l)
x = c(1,2,3, 2, 7, 10)
x
x==2
pnorm(1.2, mean = 1.5, sd = sqrt(4.5))
1-pnorm(1.2, mean = 1.5, sd = sqrt(4.5))
pnorm(0.232)
prop.test(160, 325)
prop.test(162, 329)
qnorm(0.975)
p = 162/329
z = qnorm(0.975)
p-z*sqrt(p(1-p)/329)
p-z*sqrt(p*(1-p)/329)
0.783	1.172	1.185	1.625	1.847	2.013	2.423
3.312	3.833	4.973	6.897	7.178	10.838	13.032
pbinom(3,80,0.03)
pbinom(3,80,0.03)-pbinom(1,80,0.03)
-7.6/sqrt(80*0.03*0.97)
1/14
pnorm(1.2, mean =1.5, sd = sqrt(4.5))
1-pnorm(1.2, mean =1.5, sd = sqrt(4.5))
1/500(28^2-22^2)
1/500*(28^2-22^2)
1/750*(30^3-20^3)
qbinom(3,80,0.03)-qbinom(1,80,0.03)
pbinom(3,80,0.03)
pbinom(1,80,0.03)
pbinom(3,80,0.03)-pbinom(1,80,0.03)
pbinom(3,80,0.03)-pbinom(0,80,0.03)
qnorm(0.99)
z = qnorm(0.99)
tmp = (z*3/0.5)^2
tmp
tmp-4
z = 2.33
tmp = (z*3/0.5)^2
tmp
tmp = 0.015*sqrt(87)*0.1
tmp
tmp = 0.015*sqrt(87)/0.1
tmp
pnorm(1.399107)
tmp
pnorm(tmp)-pnorm(-1*tmp)
pnorm(1.4)-pnorm(-1.4)
qt(0.05,df = 19)
t = -1.729
21 - t*5/sqrt(20)
21 + t*5/sqrt(20)
pbinom(3,80,0.03)-pbinom(0,80,0.03)
prop.test(162, 329)
0.4372801 + 0.5477027
1/2*(0.4372801 + 0.5477027)
160/325
prop.test(160,325)
p =
0.4923077
p
p+sqrt(p*(1-p)/325)
p - sqrt(p(1-p)/325)
p - sqrt(p*(1-p)/325)
p - 1.96*sqrt(p*(1-p)/325)
p + 1.96*sqrt(p*(1-p)/325)
p = 0.37
p - 1.96*sqrt(p*(1-p)/100)
p + 1.96*sqrt(p*(1-p)/100)
prop.test(37,100)
rolls = sample(6,50,replace =TRUE)
rolls
table(rolls)
scores = rep(5,7)
scores
scores = c(scores, rep(10,21))
scores
x = c(1,2,3)
x
x = c(x, c(4,5,6))
x
sample(0:1, 50, replace = TRUE)
sample(0:1, 50, replace = TRUE, prob = c(1/4,3/4))
pt(-2.59, df = 14)
qnorm(-0.82)
pnorm(-0.82)
2*pnorm(-0.82)
pbinom(5,11,0.8)
1-0.01165421
dbinom(11,11,0.8)
1- dbinom(11,11,0.8)
dbinom(11,11,0.8)
1 - 0.08589935
1-dbinom(11,11,0.51)
1-dbinom(21,21,0.51)
pbnom(5,11, 0.8)
pbinom(5,11, 0.8)
pbinom(5,11, 0.51)
pbinom(10,21, 0.51)
# finding probability of a correct prediction, so the 100% minus the outcome would be the incorrect prediction
pbinom(5, size=11, prob=0.2)
1 - pbinom(5, size=11, prob=0.2)
1- pbinom(5, size=11, prob=0.49)
1 - pbinom(10, size=21, prob=0.49)
# Calculate the probability of a model ensemble that uses simple majority voting making
# an incorrect prediction in the following scenarios. (Hint: Understanding how to
# use the binomial distribution will be useful in answering this question.)
# The ensemble contains 11 independent models, all of which have an error rate of 0.2.
dbinom(2, size=11, prob=0.2)
# Output = 0.295279
# The ensemble contains 11 independent models, all of which have an error rate of 0.49.
dbinom(2, size=11, prob=0.49)
# Output = 0.03082382
# The ensemble contains 21 independent models, all of which have an error rate of 0.49.
dbinom(2, size=21, prob=0.49)
# Output = 0.0001401022
X = c(1,2,3)
Y = c(2,2, 4)
t.test(X,Y)
t.test(X,Y, paired = FALSE)
2*pt(-0.06, 20)
2*pt(-0.365, 20)
X = c(54, 61, 74, 59, 80)
Y = c(63, 63, 78, 65, 90)
t.test(X,Y, paired = TRUE)
mean(X)
mean(Y)
pt(-0.365, 20)
2*pt(-0.365, 20)
X =c(54,61,74,59, 80)
X
Y = c(63,63, 78, 65, 90)
Y
t.test(X,Y, paired = TRUE)
t.test(X,Y, paired = TRUE, alternative = 'lower')
t.test(X,Y, paired = TRUE, alternative = 'less')
t.test(X,Y, paired = TRUE, alternative = 'greater')
t.test(X,Y, paired = TRUE, alternative = 'less')
t.test(X,Y, alternative = 'less')
Y-X
sd(Y-X)
sd(Y-X)/sqrt(5)
sqrt(sd(X)^2/(5)+sd(Y)^2/5)
t.test(X,Y, alternative = 'less')
X = c(1, 2, 4, 5, 6)
Y = c(2, 4, 1, 7, 10)
X
Y
t.test(X,Y)
t.test(X,Y, alternative = 'less')
t.test(Y,X, alternative = 'less')
t.test?
;
?t.test
X = c(2,16,18,4,10)
chisq.test(X)
chisq.test(X, p =rep(1/length(x), length(x)))
chisq.test(X, p =rep(1/length(X), length(X)))
chisq.test(X, p =rep(0.2,5))
chisq.test(X, p = (0.1,0.25,0.3,0.25,0.1))
chisq.test(X, p = c(0.1,0.25,0.3,0.25,0.1))
X = c(8,6,17,7,12)
sum(x)
sum(X)
Y = c(5,6,14,12,13)
sum(Y)
Z = c(7,4,12, 14, 13)
sum(Z)
M = rbind(X,Y,Z)
M
chisq.test(M)
X = c(2,16,18,4,10)
X
chisq.test(X)
chisq.test(X, p = c(0.2,0.2,0.2,0.2,0.2))
chisq.test(X, p = c(0.1,0.25,0.3,0.25,0.1))
X = c(8,6,17,7, 12)
sum(X)
Y = c(5,6,14,12, 13)
sum(Y)
Z = c(7,4,12,14,13)
sum(Z)
M = rbind(X,Y,Z)
M
chisq.test(M)
df = (3-1)*(5-1)
df
chisq.test(39, 100-39)
chisq.test(c(39, 100-39)
)
setwd("C:/Users/brett/OneDrive/Bellevue/Course Development/DSC 320 - Mathematics for Data Science/Week 10 Files")
data = read.csv('survey_data.csv', header = TRUE)
data
